on:
  pull_request:
    paths:
      - '**.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'

name: Pull Request
jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all -- -D warnings

  deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deny
      - uses: actions-rs/cargo@v1
        with:
          command: deny
          args: check --hide-inclusion-graph license sources advisories

  build:
    name: Build
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            cross: false
          - build: arm-v7
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            linker: gcc-arm-linux-gnueabihf
            cross: true
          - build: aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            cross: true
          - build: macos
            os: macos-latest
            rust: stable
            target: false
            cross: false
          - build: windows
            os: windows-latest
            rust: stable
            target: false
            cross: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all -- -D warnings

      - name: Install Linker
        if: matrix.cross
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker }}

      - name: Build for non-Linux
        uses: actions-rs/toolchain@v1
        if: matrix.build != 'linux'
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        if: matrix.build != 'linux' && matrix.target == false
        with:
          command: build
          args: -q --release
      - uses: actions-rs/cargo@v1
        if: matrix.build != 'linux' && matrix.target != false
        with:
          command: build
          args: -q --release --target ${{ matrix.target }}

      - name: Build for Linux
        uses: ./.github/actions/linux-x86_64-musl/
        if: matrix.build == 'linux'
        with:
          args: cargo build -q --release --target x86_64-unknown-linux-musl


  wasm-pack:
    name: Wasm Build
    strategy:
      matrix:
        wasm-dirctory: [config-wasm, hdr-histogram-wasm]
    runs-on: ubuntu-latest
    env:
      WASM_FILE: ${{ matrix.wasm-dirctory }}_bg.wasm
      wasm-directory: ./lib/${{ matrix.wasm-dirctory }}
      test-directory: ./lib/${{ matrix.wasm-dirctory }}/tests
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: wasm-pack

      - name: Create the Web Assembly
        id: wasm_pack
        run: |
          set -x
          wasm-pack build --release -t nodejs --scope fs
          WASM_FILE_FIXED="${WASM_FILE//-/_}"
          wget -O /tmp/binaryen-version_90-x86-linux.tar.gz  https://github.com/WebAssembly/binaryen/releases/download/version_90/binaryen-version_90-x86-linux.tar.gz
          tar -xvf /tmp/binaryen-version_90-x86-linux.tar.gz -C /tmp
          /tmp/binaryen-version_90/wasm-opt pkg/${WASM_FILE_FIXED} -o pkg/${WASM_FILE_FIXED} -Oz
        working-directory: ${{env.wasm-directory}}
        shell: bash

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Install Dependencies
        run: npm ci
        working-directory: ${{env.test-directory}}
      - name: Run Acceptance Tests
        run: npm test
        working-directory: ${{env.test-directory}}
