"use strict";(self.webpackChunkresults_viewer_react=self.webpackChunkresults_viewer_react||[]).push([[817],{380:(module,__webpack_exports__,__webpack_require__)=>{eval("{__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Zc: () => (/* reexport safe */ _hdr_histogram_wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__.Zc)\n/* harmony export */ });\n/* harmony import */ var _hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(854);\n/* harmony import */ var _hdr_histogram_wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(832);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__]);\nvar __webpack_async_dependencies_result__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_async_dependencies_result__[0];\n\n\n\n(0,_hdr_histogram_wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__/* .__wbg_set_wasm */ .lI)(_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__);\n_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_start();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUNWO0FBQ2lCO0FBQzVELG1GQUFjLENBQUMsd0RBQUk7QUFDbkIseUVBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdWx0cy12aWV3ZXItcmVhY3QvLi9saWIvaGRyLWhpc3RvZ3JhbS13YXNtL2hkcl9oaXN0b2dyYW1fd2FzbS5qcz83Y2VlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHdhc20gZnJvbSBcIi4vaGRyX2hpc3RvZ3JhbV93YXNtX2JnLndhc21cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2hkcl9oaXN0b2dyYW1fd2FzbV9iZy5qc1wiO1xuaW1wb3J0IHsgX193Ymdfc2V0X3dhc20gfSBmcm9tIFwiLi9oZHJfaGlzdG9ncmFtX3dhc21fYmcuanNcIjtcbl9fd2JnX3NldF93YXNtKHdhc20pO1xud2FzbS5fX3diaW5kZ2VuX3N0YXJ0KCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///380\n\n}")},817:(module,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataPoint: () => (/* binding */ DataPoint),\n/* harmony export */   processJson: () => (/* binding */ processJson),\n/* harmony export */   processNewJson: () => (/* binding */ processNewJson)\n/* harmony export */ });\n/* harmony import */ var _fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(380);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__]);\nvar __webpack_async_dependencies_result__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n_fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_async_dependencies_result__[0];\n\nfunction isObject(o) {\n    return typeof o === "object" && !!o;\n}\nfunction valueChecker(check, unknownCheck, key, value) {\n    if (typeof check === "string") {\n        const type = typeof value;\n        if (type !== check) {\n            return `expected property "${key}" to be a "${check}" but it was a "${type}"`;\n        }\n    }\n    else if (check !== undefined) {\n        if (!check(value)) {\n            return `property "${key}" did not pass check`;\n        }\n    }\n    else if (typeof unknownCheck === "string") {\n        const type = typeof value;\n        if (type !== unknownCheck) {\n            return `expected property "${key}" to be a "${unknownCheck}" but it was a "${type}"`;\n        }\n    }\n    else if (unknownCheck !== undefined) {\n        if (!unknownCheck(value)) {\n            return `property "${key}" did not pass check`;\n        }\n    }\n    return undefined;\n}\nfunction propertyChecker(o, requiredChecks, unknownCheck, optionalChecks) {\n    const requiredMap = new Map(requiredChecks);\n    const optionalMap = new Map(optionalChecks || []);\n    for (const [key, value] of Object.entries(o)) {\n        const check = requiredMap.get(key) || optionalMap.get(key);\n        requiredMap.delete(key);\n        const checkedResult = valueChecker(check, unknownCheck, key, value);\n        if (checkedResult) {\n            return checkedResult;\n        }\n    }\n    if (requiredMap.size > 0) {\n        const missingProperties = [...requiredMap.keys()]\n            .map((k) => `"${k}"`)\n            .join(", ");\n        return "missing properties: " + missingProperties;\n    }\n    return undefined;\n}\nfunction asBucketId(b) {\n    if (!isObject(b)) {\n        return new Error("bucket id is not an object");\n    }\n    const checks = [\n        ["method", "string"],\n        ["url", "string"]\n    ];\n    const result = propertyChecker(b, checks, "string");\n    if (result) {\n        return new Error("failed property check for bucket id. " + result);\n    }\n    else {\n        return b;\n    }\n}\nclass DataPoint {\n    time;\n    duration;\n    endTime;\n    requestTimeouts;\n    rttHistogram;\n    startTime;\n    statusCounts;\n    testErrors;\n    constructor(preProcessed) {\n        this.time = new Date(preProcessed.time * 1000);\n        this.duration = preProcessed.duration;\n        if (preProcessed.endTime !== 0) {\n            this.endTime = new Date(preProcessed.endTime * 1000);\n        }\n        this.requestTimeouts = preProcessed.requestTimeouts || 0;\n        this.rttHistogram = new _fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__/* .HDRHistogram */ .Zc(preProcessed.rttHistogram);\n        if (preProcessed.startTime !== 0) {\n            this.startTime = new Date(preProcessed.startTime * 1000);\n        }\n        this.statusCounts = preProcessed.statusCounts;\n        this.testErrors = preProcessed.testErrors;\n    }\n    mergeInto(other) {\n        this.requestTimeouts += other.requestTimeouts;\n        this.rttHistogram.add(other.rttHistogram);\n        for (const key of Object.keys(other.statusCounts)) {\n            this.statusCounts[key] = (this.statusCounts[key] || 0) + (other.statusCounts[key] || 0);\n        }\n        for (const key of Object.keys(other.testErrors)) {\n            this.testErrors[key] = (this.testErrors[key] || 0) + (other.testErrors[key] || 0);\n        }\n    }\n    clone() {\n        const props = {\n            rttHistogram: this.rttHistogram.clone(),\n            statusCounts: Object.assign({}, this.statusCounts),\n            testErrors: Object.assign({}, this.testErrors)\n        };\n        return Object.assign(Object.create(this), this, props);\n    }\n}\nfunction isStatusCounts(sc) {\n    if (!isObject(sc)) {\n        return false;\n    }\n    return Object.entries(sc).every(([k, v]) => Number.parseInt(k, 10) > 0 && typeof v === "number");\n}\nfunction isTestErrors(sc) {\n    if (!isObject(sc)) {\n        return false;\n    }\n    return Object.values(sc).every((v) => typeof v === "number");\n}\nfunction asDataPointPreProcessed(dp) {\n    if (!isObject(dp)) {\n        return new Error("data point is not an object");\n    }\n    const checks = [\n        ["duration", "number"],\n        ["endTime", "number"],\n        ["rttHistogram", "string"],\n        ["startTime", "number"],\n        ["statusCounts", isStatusCounts],\n        ["testErrors", isTestErrors],\n        ["time", "number"]\n    ];\n    const optionalChecks = [\n        ["requestTimeouts", "number"]\n    ];\n    const result = propertyChecker(dp, checks, undefined, optionalChecks);\n    if (result) {\n        return new Error("failed property check for data point. " + result);\n    }\n    else {\n        return dp;\n    }\n}\nfunction asBucketEntry(b) {\n    if (!Array.isArray(b)) {\n        return new Error(`expected bucket entry to be an array but got: ${JSON.stringify(b)}`);\n    }\n    if (b.length !== 2) {\n        return new Error(`expected bucket entry to be an array with 2 element but it had ${b.length}`);\n    }\n    {\n        const result = asBucketId(b[0]);\n        if (result instanceof Error) {\n            return result;\n        }\n    }\n    if (!Array.isArray(b[1])) {\n        return new Error(`expected second value in bucket entry array to be an array bug got: ${JSON.stringify(b[1])}`);\n    }\n    for (const dppp of b[1]) {\n        const result = asDataPointPreProcessed(dppp);\n        if (result instanceof Error) {\n            return result;\n        }\n    }\n    return b;\n}\nfunction asStatsFile(s) {\n    if (!isObject(s)) {\n        return new Error("stats is not an object");\n    }\n    const checks = [["buckets", Array.isArray]];\n    {\n        const result = propertyChecker(s, checks);\n        if (result) {\n            return new Error("failed property check for stats. " + result);\n        }\n    }\n    const buckets = s.buckets;\n    for (const b of buckets) {\n        const result = asBucketEntry(b);\n        if (result instanceof Error) {\n            return result;\n        }\n    }\n    return s;\n}\nfunction processJson(json) {\n    const result = asStatsFile(json);\n    if (result instanceof Error) {\n        throw result;\n    }\n    else {\n        const ret = [];\n        for (const [bucketId, dataPoints] of result.buckets) {\n            ret.push([bucketId, dataPoints.map((dp) => new DataPoint(dp))]);\n        }\n        return ret;\n    }\n}\nfunction isTags(tags) {\n    if (!isObject(tags)) {\n        return false;\n    }\n    const tags2 = tags;\n    return typeof tags2.index === "number"\n        && Object.entries(tags2.tags).every(([_k, v]) => typeof v === "string")\n        && tags2.tags["_id"] !== undefined\n        && tags2.tags["method"] !== undefined\n        && tags2.tags["url"] !== undefined;\n}\nfunction isTimeBucketEntry(tbe) {\n    if (!isObject(tbe)) {\n        return false;\n    }\n    const tbe2 = tbe;\n    const fails = (tbe2["rttHistogram"] !== undefined && typeof tbe2.rttHistogram !== "string")\n        || (tbe2["statusCounts"] !== undefined && !isStatusCounts(tbe2.statusCounts))\n        || (tbe2["requestTimeouts"] !== undefined && typeof tbe2.requestTimeouts !== "number")\n        || (tbe2["testErrors"] !== undefined && !isTestErrors(tbe2.testErrors));\n    return !fails;\n}\nfunction isEntries(entries) {\n    if (!isObject(entries)) {\n        return false;\n    }\n    return Object.entries(entries).every(([_k, v]) => isTimeBucketEntry(v));\n}\nfunction isHeader(header) {\n    if (!isObject(header)) {\n        return false;\n    }\n    const headerChecks = [\n        ["test", "string"],\n        ["bin", "string"],\n        ["bucketSize", "number"]\n    ];\n    return !propertyChecker(header, headerChecks);\n}\nfunction isBuckets(buckets) {\n    if (!isObject(buckets)) {\n        return false;\n    }\n    const bucketsChecks = [\n        ["time", "number"],\n        ["entries", isEntries]\n    ];\n    return !propertyChecker(buckets, bucketsChecks);\n}\nfunction checkNewJsonEntry(entry) {\n    return isHeader(entry)\n        || isTags(entry)\n        || isBuckets(entry);\n}\nfunction processNewJson(jsons) {\n    const tags = [];\n    const data = [];\n    let bucketSize = 0;\n    for (const json of jsons) {\n        if (!checkNewJsonEntry(json)) {\n            throw new Error("failed property checks for entry");\n        }\n        if ("test" in json) {\n            bucketSize = json.bucketSize;\n            continue;\n        }\n        else if ("tags" in json) {\n            tags[json.index] = json.tags;\n        }\n        else {\n            const time = json.time;\n            for (const [index, values] of Object.entries(json.entries)) {\n                const dppp = {\n                    time,\n                    duration: bucketSize,\n                    endTime: time + bucketSize,\n                    rttHistogram: values.rttHistogram || "HISTEwAAAAEAAAAAAAAAAwAAAAAAAAABAAAAAAAAAAI/8AAAAAAAAAA",\n                    startTime: time,\n                    statusCounts: values.statusCounts || {},\n                    testErrors: values.testErrors || {}\n                };\n                const index2 = parseInt(index, 10);\n                data[index2] = data[index2] || [];\n                data[index2].push(dppp);\n            }\n        }\n    }\n    const buckets = [];\n    for (const [index, tag] of tags.entries()) {\n        buckets[index] = [tag, data[index]];\n    }\n    const statsFile = { buckets };\n    return processJson(statsFile);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///817\n\n}')},832:(module,__webpack_exports__,__webpack_require__)=>{eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Qn: () => (/* binding */ __wbindgen_throw),\n/* harmony export */   Zc: () => (/* binding */ HDRHistogram),\n/* harmony export */   bL: () => (/* binding */ __wbindgen_init_externref_table),\n/* harmony export */   lI: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   pW: () => (/* binding */ __wbg_error_524f506f44df1645),\n/* harmony export */   yc: () => (/* binding */ __wbindgen_string_new)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_0.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nconst HDRHistogramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_hdrhistogram_free(ptr >>> 0, 1));\n\nclass HDRHistogram {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(HDRHistogram.prototype);\n        obj.__wbg_ptr = ptr;\n        HDRHistogramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        HDRHistogramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_hdrhistogram_free(ptr, 0);\n    }\n    /**\n     * @param {string} base64\n     * @param {string | null} [log_level]\n     */\n    constructor(base64, log_level) {\n        const ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(log_level) ? 0 : passStringToWasm0(log_level, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.hdrhistogram_from_base64(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        HDRHistogramFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    getMean() {\n        const ret = wasm.hdrhistogram_getMean(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    getStdDeviation() {\n        const ret = wasm.hdrhistogram_getStdDeviation(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {bigint}\n     */\n    getTotalCount() {\n        const ret = wasm.hdrhistogram_getTotalCount(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @param {number} percentile\n     * @returns {bigint}\n     */\n    getValueAtPercentile(percentile) {\n        const ret = wasm.hdrhistogram_getValueAtPercentile(this.__wbg_ptr, percentile);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @param {HDRHistogram} other\n     */\n    add(other) {\n        _assertClass(other, HDRHistogram);\n        const ret = wasm.hdrhistogram_add(this.__wbg_ptr, other.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    getMinNonZeroValue() {\n        const ret = wasm.hdrhistogram_getMinNonZeroValue(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @returns {bigint}\n     */\n    getMaxValue() {\n        const ret = wasm.hdrhistogram_getMaxValue(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @returns {HDRHistogram}\n     */\n    clone() {\n        const ret = wasm.hdrhistogram_clone(this.__wbg_ptr);\n        return HDRHistogram.__wrap(ret);\n    }\n}\n\nfunction __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nfunction __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_0;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nfunction __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///832\n\n}")},854:(Q,B,F)=>{var U=F(832);Q.exports=F.v(B,Q.id,"faf2554cd5dd705ca29d",{"./hdr_histogram_wasm_bg.js":{__wbindgen_string_new:U.yc,__wbg_error_524f506f44df1645:U.pW,__wbindgen_throw:U.Qn,__wbindgen_init_externref_table:U.bL}})}}]);