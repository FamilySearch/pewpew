on:
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'common/**.js*'
      - 'common/**.ts*'
      - 'common/package.json'
      - 'agent/**.js*'
      - 'agent/**.ts*'
      - 'agent/package.json'
      - 'controller/**.html'
      - 'controller/**.js*'
      - 'controller/**.ts*'
      - 'controller/package.json'

name: Pull Request PPaaS
jobs:
  changedfiles: # https://dev.to/scienta/get-changed-files-in-github-actions-1p36
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      all_files: ${{ steps.changes.outputs.all_files}}
      agent_files: ${{ steps.changes.outputs.agent_files }}
      lock_file: ${{ steps.changes.outputs.lock_file }}
    steps:
        # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changes
        run: |
          export all_files=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)
          # Send to outside variable
          echo "all_files=$all_files" >> $GITHUB_OUTPUT
          echo "all_files=$all_files"
          export agent_files=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep "^agent/createtest/" | grep ".spec.ts$" | xargs)
          echo "agent_files=$agent_files"
          if [[ -z "${agent_files[@]}" ]] && ([[ "${all_files[@]}" =~ "agent/package.json" ]] || [[ "${all_files[@]}" =~ "agent/src/pewpewtest.ts" ]]); then
            echo "No test files changed, but changed package.json or pewpewtest.ts"
            export agent_files="agent/package.json"
          fi
          if [[ "${all_files[@]}" =~ "package-lock.json" ]]; then
            echo "Lock file changed, need to test latest Chrome"
            echo "lock_file=true" >> $GITHUB_OUTPUT
            echo "lock_file=true"
          fi
          echo "agent_files=$agent_files" >> $GITHUB_OUTPUT
          echo "agent_files=$agent_files"

  test-release:
    name: Build project
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      DOWNLOAD_PEWPEW: true

    steps:
      - uses: actions/checkout@v4
      - name: Add Rust toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update
      - run: rustup target add wasm32-unknown-unknown --toolchain stable
      - name: Add Node.js toolchain ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build Webassemblies ${{ matrix.node-version }}
        run: |
          set -x
          # install mdbook and wasm-pack
          mkdir ~/bin
          PATH=$PATH:~/bin
          curl -sSL https://github.com/rustwasm/wasm-pack/releases/download/v0.12.1/wasm-pack-v0.12.1-x86_64-unknown-linux-musl.tar.gz \
            | tar -xz --strip-components=1 -C ~/bin --no-anchored wasm-pack

          # setup some envs to various paths for convenience
          PROJECT_ROOT=$PWD
          CONTROLLER_DIR=$(realpath $PROJECT_ROOT/controller)
          CONFIG_WASM_LIB_DIR=$(realpath $PROJECT_ROOT/lib/config-wasm)
          HDR_WASM_LIB_DIR=$(realpath $PROJECT_ROOT/lib/hdr-histogram-wasm)
          HDR_WASM_OUTPUT_REACT_DIR=$CONTROLLER_DIR/lib/hdr-histogram-wasm

          # build the hdr-histogram-wasm for the results viewer
          cd $HDR_WASM_LIB_DIR
          wasm-pack build --release -t bundler -d $HDR_WASM_OUTPUT_REACT_DIR --scope fs

          # build the config-wasm for the yaml parser
          cd $CONFIG_WASM_LIB_DIR
          wasm-pack build --release -t nodejs --scope fs

      - name: Create .env file for controller that can be overridden by a .env.production file
        run: |
          set -x
          # setup some envs to various paths that re required for build
          PROJECT_ROOT=$PWD
          CONTROLLER_DIR=$(realpath $PROJECT_ROOT/controller)
          # .env.production will override .env, but NOT .env.local or environment variables passed in
          ENV_FILE=$CONTROLLER_DIR/.env
          touch "$ENV_FILE"
          echo PEWPEWCONTROLLER_UNITTESTS_S3_BUCKET_NAME="unit-test-bucket" >> "$ENV_FILE"
          echo PEWPEWCONTROLLER_UNITTESTS_S3_BUCKET_URL="https://unit-test-bucket.s3.amazonaws.com" >> "$ENV_FILE"
          echo PEWPEWCONTROLLER_UNITTESTS_S3_KEYSPACE_PREFIX="unittests/" >> "$ENV_FILE"
          echo PEWPEWCONTROLLER_UNITTESTS_S3_REGION_ENDPOINT="s3-us-east-1.amazonaws.com" >> "$ENV_FILE"
          echo APPLICATION_NAME=pewpewcontroller >> "$ENV_FILE"
          echo AGENT_ENV="unittests" >> "$ENV_FILE"
          echo AGENT_DESC="c5n.large" >> "$ENV_FILE"
          echo PEWPEWAGENT_UNITTESTS_SQS_SCALE_OUT_QUEUE_URL="https://sqs.us-east-1.amazonaws.com/unittests/sqs-scale-out" >> "$ENV_FILE"
          echo PEWPEWAGENT_UNITTESTS_SQS_SCALE_IN_QUEUE_URL="https://sqs.us-east-1.amazonaws.com/unittests/sqs-scale-in" >> "$ENV_FILE"
          echo PEWPEWCONTROLLER_UNITTESTS_SQS_COMMUNICATION_QUEUE_URL="https://sqs.us-east-1.amazonaws.com/unittests/sqs-communication" >> "$ENV_FILE"

      - name: Install NPM Dependencies
        run: npm ci
      - name: Run Lint
        run: npm run linterror
      - name: Build Controller
        run: npm run build:react
      - name: Run Tests
        run: NODE_ENV=test npm test
      - name: Run Agent CreateTest
        if: ${{ needs.changedfiles.outputs.agent_files }}
        run: cd agent/ && NODE_ENV=test npm run createtest
