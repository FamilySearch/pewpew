on:
  push:
    tags:
      - v*

name: Release
jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/44937/highlight/true#M5978
      - name: Get the version
        id: get_version
        run: |
          version=${GITHUB_REF/refs\/tags\//}
          echo ::set-env name=VERSION::$version
          # remove the leading "v" for subsequent usage
          version=${version/v/}
          # check if this is a "preview" release and should be marked as "prerelease" in GitHub releases
          if [[ $version == *"preview"* ]]; then
            echo ::set-env name=PRERELEASE::true
          else
            # check that the version in Cargo.toml is equal to the tag
            grep -q "version = \"${version}\"" Cargo.toml || echo "$(tput setaf 1)Tag version did NOT match version in Cargo.toml" && false
            echo ::set-env name=PRERELEASE::false
          fi
        shell: bash

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          prerelease: ${{ env.PRERELEASE }}

      - name: Save artifacts
        run: |
          mkdir artifacts
          echo "${{ steps.release.outputs.upload_url }}" | tee artifacts/release-upload-url
          echo $VERSION | tee artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Update guide
        if: env.PRERELEASE == 'false'
        run: |
          # install wasm-pack
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

          # setup some envs to various paths for convenience
          PROJECT_ROOT=$PWD
          GUIDE_DIR=$(realpath $PROJECT_ROOT/guide)
          RESULTS_VIEWER_DIR=$(realpath $GUIDE_DIR/results-viewer)
          WASM_LIB_DIR=$(realpath $PROJECT_ROOT/lib/hdr-histogram-wasm)
          WASM_OUTPUT_DIR=$RESULTS_VIEWER_DIR/lib/hdr-histogram-wasm

          # build the hdr-histogram-wasm for the results viewer
          cd $WASM_LIB_DIR
          wasm-pack build --release -t web -d $WASM_OUTPUT_DIR
          cd $WASM_OUTPUT_DIR
          sed 's/input = import\.meta\.url.*/import(".\/hdr_histogram_wasm_bg.wasm");\ninput = require.resolve(".\/hdr_histogram_wasm_bg.wasm")[0][0];/' hdr_histogram_wasm.js > hdr_histogram_wasm2.js
          mv hdr_histogram_wasm2.js hdr_histogram_wasm.js

          # build the results viewer (which includes putting the output into the book's src)
          cd $RESULTS_VIEWER_DIR
          npm install
          npm run build

          # build the book
          cd $GUIDE_DIR
          mdbook build

          # create a git worktree of the gh-pages branch and clear it out
          git worktree add -B gh-pages gh-pages gh-pages
          find gh-pages -not -name '.git' -not -name 'gh-pages' -delete

          # copy the source to the gh-pages worktree
          cp -r book/. gh-pages/

          # commit amend all the changes into the gh-pages branch and force push to github
          git remote add github "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git"
          cd gh-pages
          git add --all
          git commit --amend --no-edit
          git push --force github gh-pages

  release:
    name: Build and Upload
    needs: ['create-release']
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Get upload data
        id: upload_data
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=VERSION::$release_version"

      - name: Set Cargo.toml version
        id: set_cargo_version
        shell: bash
        run: |
          # remove the leading "v" for subsequent usage
          version=${VERSION/v/}
          # replace the version value in Cargo.toml with the tag version (so we don't need to create extraneous commits for every preview version)
          cp Cargo.toml Cargo2.toml
          sed "0,/version = \".*\"/s//version = \"$version\"/" Cargo2.toml > Cargo.toml

      - name: Build for non-Linux
        uses: actions-rs/toolchain@v1
        if: matrix.os != 'ubuntu-latest'
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        if: matrix.os != 'ubuntu-latest'
        with:
          command: build
          args: -q --release

      - name: Build for Linux
        uses: ./.github/actions/linux-x86_64-musl/
        if: matrix.os == 'ubuntu-latest'
        with:
          args: cargo build -q --release --target x86_64-unknown-linux-musl

      - name: Compress for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          asset_name="pewpew-$VERSION-linux-x86_64-musl.tar.xz"
          echo "::set-env name=ASSET_NAME::$asset_name"
          XZ_OPT=-9 tar -C ./target/x86_64-unknown-linux-musl/release/ -cJf $asset_name pewpew

      - name: Compress for Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          asset_name="pewpew-$VERSION-windows-x86_64.zip"
          echo "::set-env name=ASSET_NAME::$asset_name"
          7z a -mm=Deflate64 -mfb=258 -mpass=15 $asset_name ./target/release/pewpew.exe

      - name: Compress for macOS
        if: matrix.os == 'macos-latest'
        run: |
          asset_name="pewpew-$VERSION-apple-darwin-x86_64.tar.xz"
          echo "::set-env name=ASSET_NAME::$asset_name"
          XZ_OPT=-9 tar -C ./target/release/ -cJf $asset_name pewpew

      - name: Upload release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream