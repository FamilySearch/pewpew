# Run this file with the test-server, then specify the PORT as a parameter to this try or run script.

vars:
  port: "${e:PORT}"
  createName: 'test:loadtest-'
  groupRate: 1
  imagesPerGroup: 10

load_pattern:
  - !linear
      from: 100%
      to: 100%
      over: 5s

providers:
  group_range: # Counter for creating groups
    !range
  image_range: # counter for creating images to put in groups
    !range
  group_created: # to continue the group APIs
    !response
  group_created_for_images: # to create images
    !response
  image_created: # to continue the image APIs
    !response
  group_create_data: !response
  image_create_data: !response
  group_update_data: !response
  image_update_data: !response

loggers:
  test:
    to: !stderr

endpoints:
  - method: POST
    url: http://localhost:${v:port}
    tags:
      type: create group
    body: !str '{
        "id":"${p:createName}${x:start_pad(${p:group_range}, 6, "0")}",
        "name":"TEST-GROUP"
      }'
    provides:
      group_created:
        query:
          select: response.body.id
          where: response.status == 200 || response.status == 409
        send: if_not_full
      group_created_for_images:
        query:
          select: response.body.id
          for_each:
            - repeat(_v.imagesPerGroup) # We need to create X copies so each image will have one
          where: response.status == 200 || response.status == 409
        send: if_not_full
    peak_load: ${v:groupRate}hps

  - method: POST
    url: http://localhost:${v:port}
    tags:
      type: create image
    body: !str '{
        "id":"${v:createName}${x:start_pad(${p:image_range}, 8, "0")}",
        "groupId":"${p:group_created_for_images}",
        "name":"TEST-IMAGE"
      }'
    provides:
      image_created:
        query:
          select:
            id: response.body.id
            groupId: response.body.groupId
          where: response.status == 200 || response.status == 409
        send: if_not_full
    peak_load: ${x:${v:groupRate} * ${v:imagesPerGroup}}hps # Needs to be a higher rate to keep up with groups

  - method: POST
    url: http://localhost:${v:port}
    tags:
      type: create group data
    body: !str '{
        "id":"${p:group_created}",
        "data":{
          "subdata":"TEST-DATA"
        }
      }'
    provides:
      group_create_data:
        query:
          select: group_created
          where: response.status == 200
        send: if_not_full
    peak_load: ${v:groupRate}hps

  - method: POST
    url: http://localhost:${v:port}
    tags:
      type: create image
    body: !str '{
        "id":"${x:${p:image_created}.id}",
        "groupId":"${x:${p:image_created}.groupId}",
        "data":{
          "subdata":"TEST-DATA"
        }
      }'
    provides:
      image_create_data:
        query:
          select: image_created # Puts in the whole object (id and groupId)
          where: response.status == 200
        send: if_not_full
    peak_load: ${x:${v:groupRate} * ${v:imagesPerGroup}}hps # Needs to be a higher rate to keep up with groups

  - method: PUT
    url: http://localhost:${v:port}
    body: !str '{
        "id":"${p:group_create_data}",
        "data":{
          "subdata":"UPDATED-TEST-DATA"
        }
      }'
    peak_load: ${v:groupRate}hps
    logs:
      test:
        select: response.body.id

  - method: PUT
    url: http://localhost:${v:port}
    body: !str '{
        "id":"${x:${p:image_create_data}.id}",
        "groupId":"${x:${p:image_create_data}.groupId}",
        "data":{
          "subdata":"UPDATED-TEST-DATA"
        }
      }'
    peak_load: ${x:${v:groupRate} * ${v:imagesPerGroup}}hps # Needs to be a higher rate to keep up with groups
    logs:
      test:
        select: response.body.id
