"use strict";(self.webpackChunkresults_viewer_react=self.webpackChunkresults_viewer_react||[]).push([[27],{27:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RTT: () => (/* binding */ RTT),\n/* harmony export */   totalCalls: () => (/* binding */ totalCalls)\n/* harmony export */ });\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);\n/* harmony import */ var _util_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(351);\n\n\nchart_js__WEBPACK_IMPORTED_MODULE_0__/* .Chart */ .t1.register(chart_js__WEBPACK_IMPORTED_MODULE_0__/* .LineElement */ .No, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .PointElement */ .FN, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .LineController */ .ZT, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .LinearScale */ .kc, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .LogarithmicScale */ .OJ, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .TimeScale */ .UA, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .Legend */ .s$, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .Title */ .hE, chart_js__WEBPACK_IMPORTED_MODULE_0__/* .Tooltip */ .m_);\nconst colors = [\n    "#3366cc",\n    "#dc3912",\n    "#ff9900",\n    "#109618",\n    "#990099",\n    "#0099c6",\n    "#dd4477",\n    "#66aa00",\n    "#b82e2e",\n    "#316395",\n    "#994499",\n    "#22aa99",\n    "#aaaa11",\n    "#6633cc",\n    "#e67300",\n    "#8b0707",\n    "#651067",\n    "#329262",\n    "#5574a6",\n    "#3b3eac"\n];\nfunction RTT(el, dataPoints) {\n    const MICROS_TO_MS = 1000;\n    const datasets = [\n        "avg",\n        "min",\n        "max",\n        "std",\n        90,\n        95,\n        99\n    ].map((type, i) => {\n        const borderColor = colors[i % colors.length];\n        const backgroundColor = borderColor + "46";\n        let label;\n        let data;\n        if (type === "avg") {\n            label = "Avg";\n            data = dataPoints.map((dp) => ({\n                x: dp.time,\n                y: dp.rttHistogram.getTotalCount()\n                    ? Math.round(dp.rttHistogram.getMean()) / MICROS_TO_MS\n                    : NaN\n            }));\n        }\n        else if (type === "min") {\n            label = "Min";\n            data = dataPoints.map((dp) => ({\n                x: dp.time,\n                y: dp.rttHistogram.getTotalCount()\n                    ? Number(dp.rttHistogram.getMinNonZeroValue()) / MICROS_TO_MS\n                    : NaN\n            }));\n        }\n        else if (type === "max") {\n            label = "Max";\n            data = dataPoints.map((dp) => ({\n                x: dp.time,\n                y: dp.rttHistogram.getTotalCount()\n                    ? Number(dp.rttHistogram.getMaxValue()) / MICROS_TO_MS\n                    : NaN\n            }));\n        }\n        else if (type === "std") {\n            label = "Std Dev";\n            data = dataPoints.map((dp) => ({\n                x: dp.time,\n                y: dp.rttHistogram.getTotalCount()\n                    ? Math.round(dp.rttHistogram.getStdDeviation()) / MICROS_TO_MS\n                    : NaN\n            }));\n        }\n        else if (typeof type === "number") {\n            label = type + "th PCTL";\n            data = dataPoints.map((dp) => ({\n                x: dp.time,\n                y: dp.rttHistogram.getTotalCount()\n                    ? Number(dp.rttHistogram.getValueAtPercentile(type)) / MICROS_TO_MS\n                    : NaN\n            }));\n        }\n        else {\n            throw new Error("Unexpected value when generating RTT chart");\n        }\n        return {\n            label,\n            borderColor,\n            backgroundColor,\n            data,\n            hidden: type === "std"\n        };\n    });\n    let chartType = "linear";\n    dataPoints.forEach((dp) => {\n        const shouldBeLogarithmic = dp.rttHistogram.getTotalCount() &&\n            Number(dp.rttHistogram.getMaxValue()) >\n                dp.rttHistogram.getMean() + 5 * dp.rttHistogram.getStdDeviation();\n        if (shouldBeLogarithmic) {\n            chartType = "logarithmic";\n        }\n    });\n    const mainChart = new chart_js__WEBPACK_IMPORTED_MODULE_0__/* .Chart */ .t1(el, {\n        type: "line",\n        data: { datasets },\n        options: {\n            scales: {\n                y: {\n                    type: chartType,\n                    title: {\n                        display: true,\n                        text: "RTT"\n                    },\n                    ticks: {\n                        callback: (v) => v + "ms",\n                        autoSkip: true\n                    }\n                },\n                x: {\n                    type: "time",\n                    time: {\n                        unit: "second"\n                    },\n                    ticks: {\n                        autoSkip: true\n                    }\n                }\n            },\n            plugins: {\n                tooltip: {\n                    callbacks: {\n                        label: ({ formattedValue }) => formattedValue + "ms"\n                    }\n                }\n            }\n        },\n        plugins: [\n            {\n                id: "afterBuildTicksLogrithmicFix",\n                beforeUpdate(chart) {\n                    const config = chart.options?.scales?.y;\n                    if (config) {\n                        config.afterBuildTicks = config.type === "logarithmic" ? afterBuildTicks : undefined;\n                    }\n                }\n            }\n        ]\n    });\n    return mainChart;\n}\nclass ChartDataSets {\n    dataSets = new Map();\n    dates = new Set();\n    setPoint(key, x, y, datasetParams = {}) {\n        this.dates.add(x);\n        if (!this.dataSets.has(key)) {\n            this.dataSets.set(key, [new Map(), datasetParams]);\n        }\n        this.dataSets.get(key)[0].set(x, y);\n    }\n    getDataSets() {\n        const ret = [];\n        const sortedEntries = [...this.dataSets.entries()].sort(([a], [b]) => {\n            if (a < b) {\n                return -1;\n            }\n            else if (b < a) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n        for (const [label, [points, datasetParams]] of sortedEntries) {\n            const data = [];\n            for (const x of this.dates) {\n                const y = points.get(x) || 0;\n                data.push({ x, y });\n            }\n            const borderColor = colors[ret.length % colors.length];\n            const backgroundColor = borderColor + "46";\n            const dataset = { label, data, borderColor, backgroundColor };\n            ret.push(Object.assign(datasetParams, dataset));\n        }\n        return ret;\n    }\n}\nfunction totalCalls(el, dataPoints) {\n    const chartDataSets = new ChartDataSets();\n    for (const dp of dataPoints) {\n        const x = dp.time;\n        const statusCounts = Object.entries(dp.statusCounts).map(([k, v]) => [k + " count", v]);\n        const pairs = [...statusCounts, ...Object.entries(dp.testErrors)];\n        for (const [key, count] of pairs) {\n            chartDataSets.setPoint(key, x, count);\n        }\n        chartDataSets.setPoint("total calls", x, Number(dp.rttHistogram.getTotalCount()), { fill: false });\n    }\n    const datasets = chartDataSets.getDataSets();\n    const totalChart = new chart_js__WEBPACK_IMPORTED_MODULE_0__/* .Chart */ .t1(el, {\n        type: "line",\n        data: { datasets },\n        options: {\n            scales: {\n                y: {\n                    type: "linear",\n                    ticks: {\n                        precision: 0,\n                        autoSkip: true\n                    },\n                    title: {\n                        display: true,\n                        text: "Count"\n                    }\n                },\n                x: {\n                    type: "time",\n                    time: {\n                        unit: "second"\n                    },\n                    ticks: {\n                        autoSkip: true\n                    }\n                }\n            },\n            plugins: {\n                tooltip: {\n                    callbacks: {\n                        label: ({ datasetIndex, formattedValue: yLabel }) => {\n                            const { label } = datasets[datasetIndex || 0];\n                            const status = label ? parseInt(label.slice(0, 3), 10) : NaN;\n                            if (!isNaN(status)) {\n                                return `${yLabel} HTTP ${status}s`;\n                            }\n                            else if (label && label.startsWith("total")) {\n                                return `${yLabel} ${label.toLowerCase()}`;\n                            }\n                            else {\n                                return `${yLabel} ${label}`;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n    return totalChart;\n}\nconst afterBuildTicks = (chart) => {\n    const maxTicks = Math.floor(Math.sqrt(chart.height));\n    const maxLog = Math.log(chart.ticks[0]);\n    const minLogSeparation = maxLog / maxTicks;\n    const myTicks = [];\n    let currLog = -Infinity;\n    chart.ticks.reverse().forEach((tick) => {\n        const newLog = Math.max(0, Math.log(tick));\n        if (newLog - currLog > minLogSeparation) {\n            myTicks.push(tick);\n            currLog = newLog;\n        }\n    });\n    chart.ticks = myTicks;\n};\n{\n    let lastLegendClick;\n    chart_js__WEBPACK_IMPORTED_MODULE_0__/* .Chart */ .t1.defaults.plugins.legend.onClick = function (_e, legendItem, legend) {\n        const chart = legend.chart;\n        const datasets = chart.data.datasets;\n        let allHidden = true;\n        if (legendItem.datasetIndex === undefined) {\n            (0,_util_log__WEBPACK_IMPORTED_MODULE_1__/* .log */ .Rm)("legendItem.datasetIndex was undefined. Please investigate", _util_log__WEBPACK_IMPORTED_MODULE_1__/* .LogLevel */ .$b.ERROR, legendItem);\n            return;\n        }\n        for (let i = 0; i < datasets.length; i++) {\n            const meta = chart.getDatasetMeta(i);\n            if (!meta.hidden && i !== legendItem.datasetIndex) {\n                allHidden = false;\n                break;\n            }\n        }\n        if (lastLegendClick && legendItem.datasetIndex === lastLegendClick[1]\n            && Date.now() - lastLegendClick[0] < 250) {\n            for (let i = 0; i < datasets.length; i++) {\n                const meta = chart.getDatasetMeta(i);\n                meta.hidden = i !== legendItem.datasetIndex;\n            }\n        }\n        else if (allHidden) {\n            for (let i = 0; i < datasets.length; i++) {\n                const meta = chart.getDatasetMeta(i);\n                meta.hidden = false;\n            }\n        }\n        else {\n            const meta = chart.getDatasetMeta(legendItem.datasetIndex);\n            meta.hidden = !legendItem.hidden;\n        }\n        chart.update();\n        lastLegendClick = [Date.now(), legendItem.datasetIndex, chart];\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n\n}')}}]);